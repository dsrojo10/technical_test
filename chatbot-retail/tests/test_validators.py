import unittest
import sys
import os

# Agregar el directorio padre al path para importar los m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from chat_core.validators import UserValidator


class TestUserValidator(unittest.TestCase):
    """Pruebas unitarias para UserValidator"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        self.validator = UserValidator()
        
    def _assert_validation_success(self, method, value, description):
        """Helper para validaciones exitosas"""
        is_valid, error_msg = method(value)
        self.assertTrue(is_valid, f"‚ùå FALLO: {description} - Valor: '{value}' deber√≠a ser v√°lido")
        self.assertIsNone(error_msg, f"‚ùå FALLO: {description} - No deber√≠a haber mensaje de error")
        print(f"‚úÖ √âXITO: {description} - Valor: '{value}' es v√°lido")
        
    def _assert_validation_failure(self, method, value, expected_error_fragment, description):
        """Helper para validaciones fallidas"""
        is_valid, error_msg = method(value)
        self.assertFalse(is_valid, f"‚ùå FALLO: {description} - Valor: '{value}' deber√≠a ser inv√°lido")
        self.assertIsNotNone(error_msg, f"‚ùå FALLO: {description} - Deber√≠a haber mensaje de error")
        self.assertIn(expected_error_fragment, error_msg, 
                     f"‚ùå FALLO: {description} - Error esperado: '{expected_error_fragment}', Error actual: '{error_msg}'")
        print(f"‚úÖ √âXITO: {description} - Valor: '{value}' correctamente rechazado con error: '{error_msg}'")
    
    def test_validate_identificacion_valid(self):
        """Test para identificaciones v√°lidas"""
        print("\nüîç PROBANDO: Validaci√≥n de identificaciones v√°lidas")
        
        test_cases = [
            ("1234", "identificaci√≥n m√≠nima de 4 d√≠gitos"),
            ("12345678", "identificaci√≥n t√≠pica de 8 d√≠gitos"), 
            ("12345678901", "identificaci√≥n m√°xima de 11 d√≠gitos"),
            ("0000", "identificaci√≥n con ceros"),
            ("9999999999", "identificaci√≥n con nueves")
        ]
        
        for identificacion, description in test_cases:
            with self.subTest(identificacion=identificacion):
                self._assert_validation_success(
                    self.validator.validate_identificacion, 
                    identificacion, 
                    f"Identificaci√≥n v√°lida: {description}"
                )
    
    def test_validate_identificacion_invalid_length(self):
        """Test para identificaciones con longitud inv√°lida"""
        print("\nüîç PROBANDO: Identificaciones con longitud inv√°lida")
        
        test_cases = [
            ("123", "identificaci√≥n muy corta (3 d√≠gitos)", "entre 4 y 11 d√≠gitos"),
            ("12", "identificaci√≥n muy corta (2 d√≠gitos)", "entre 4 y 11 d√≠gitos"),
            ("123456789012", "identificaci√≥n muy larga (12 d√≠gitos)", "entre 4 y 11 d√≠gitos"),
            ("1234567890123456", "identificaci√≥n extremadamente larga (16 d√≠gitos)", "entre 4 y 11 d√≠gitos")
        ]
        
        for identificacion, description, expected_error in test_cases:
            with self.subTest(identificacion=identificacion):
                self._assert_validation_failure(
                    self.validator.validate_identificacion,
                    identificacion,
                    expected_error,
                    f"Identificaci√≥n inv√°lida: {description}"
                )
    
    def test_validate_identificacion_invalid_characters(self):
        """Test para identificaciones con caracteres inv√°lidos"""
        print("\nüîç PROBANDO: Identificaciones con caracteres no num√©ricos")
        
        test_cases = [
            ("12a34", "identificaci√≥n con letra", "d√≠gitos num√©ricos"),
            ("1234-", "identificaci√≥n con gui√≥n", "d√≠gitos num√©ricos"),
            ("12.34", "identificaci√≥n con punto", "d√≠gitos num√©ricos"),
            ("12 34", "identificaci√≥n con espacio", "d√≠gitos num√©ricos"),
            ("12@34", "identificaci√≥n con s√≠mbolo", "d√≠gitos num√©ricos"),
            ("abcd", "identificaci√≥n solo letras", "d√≠gitos num√©ricos")
        ]
        
        for identificacion, description, expected_error in test_cases:
            with self.subTest(identificacion=identificacion):
                self._assert_validation_failure(
                    self.validator.validate_identificacion,
                    identificacion,
                    expected_error,
                    f"Identificaci√≥n inv√°lida: {description}"
                )
    
    def test_validate_identificacion_empty(self):
        """Test para identificaci√≥n vac√≠a"""
        print("\nüîç PROBANDO: Identificaciones vac√≠as o nulas")
        
        test_cases = [
            ("", "cadena vac√≠a", "no puede estar vac√≠a"),
            (None, "valor None", "no puede estar vac√≠a")
        ]
        
        for identificacion, description, expected_error in test_cases:
            with self.subTest(identificacion=str(identificacion)):
                self._assert_validation_failure(
                    self.validator.validate_identificacion,
                    identificacion,
                    expected_error,
                    f"Identificaci√≥n inv√°lida: {description}"
                )
    
    def test_validate_nombre_completo_valid(self):
        """Test para nombres v√°lidos"""
        print("\nüîç PROBANDO: Validaci√≥n de nombres completos v√°lidos")
        
        test_cases = [
            ("Juan P√©rez", "nombre simple con tilde"),
            ("Mar√≠a Jos√© Garc√≠a", "nombre compuesto con tildes"),
            ("Jos√© Luis Rodr√≠guez Mart√≠nez", "nombre con m√∫ltiples palabras"),
            ("Sof√≠a", "nombre simple"),
            ("Ana Mar√≠a de la Cruz", "nombre con preposiciones"),
            ("√ëo√±o Espa√±ol", "nombre con √± y tildes")
        ]
        
        for nombre, description in test_cases:
            with self.subTest(nombre=nombre):
                self._assert_validation_success(
                    self.validator.validate_nombre_completo,
                    nombre,
                    f"Nombre v√°lido: {description}"
                )
    
    def test_validate_nombre_completo_invalid_characters(self):
        """Test para nombres con caracteres inv√°lidos"""
        print("\nüîç PROBANDO: Nombres con caracteres no permitidos")
        
        test_cases = [
            ("Juan123", "nombre con n√∫meros", "solo puede contener letras"),
            ("Mar√≠a@gmail", "nombre con s√≠mbolo @", "solo puede contener letras"),
            ("Jos√©-Luis", "nombre con gui√≥n", "solo puede contener letras"),
            ("Ana_Mar√≠a", "nombre con gui√≥n bajo", "solo puede contener letras"),
            ("Pedro.Pablo", "nombre con punto", "solo puede contener letras"),
            ("Carlos#", "nombre con s√≠mbolo #", "solo puede contener letras")
        ]
        
        for nombre, description, expected_error in test_cases:
            with self.subTest(nombre=nombre):
                self._assert_validation_failure(
                    self.validator.validate_nombre_completo,
                    nombre,
                    expected_error,
                    f"Nombre inv√°lido: {description}"
                )
    
    def test_validate_nombre_completo_empty(self):
        """Test para nombre vac√≠o"""
        print("\nüîç PROBANDO: Nombres vac√≠os o nulos")
        
        test_cases = [
            ("", "cadena vac√≠a", "no puede estar vac√≠o"),
            (None, "valor None", "no puede estar vac√≠o")
        ]
        
        for nombre, description, expected_error in test_cases:
            with self.subTest(nombre=str(nombre)):
                self._assert_validation_failure(
                    self.validator.validate_nombre_completo,
                    nombre,
                    expected_error,
                    f"Nombre inv√°lido: {description}"
                )
    
    def test_validate_nombre_completo_too_long(self):
        """Test para nombre muy largo"""
        print("\nüîç PROBANDO: Nombres que exceden la longitud m√°xima")
        
        long_name = "a" * 101  # 101 caracteres
        self._assert_validation_failure(
            self.validator.validate_nombre_completo,
            long_name,
            "m√°s de 100 caracteres",
            "Nombre demasiado largo (101 caracteres)"
        )
    
    def test_validate_telefono_valid(self):
        """Test para tel√©fonos v√°lidos"""
        print("\nüîç PROBANDO: Validaci√≥n de tel√©fonos v√°lidos")
        
        test_cases = [
            ("3001234567", "celular t√≠pico que empieza por 3"),
            ("6012345678", "fijo t√≠pico que empieza por 6"),
            ("3999999999", "celular l√≠mite superior para 3"),
            ("6999999999", "fijo l√≠mite superior para 6"),
            ("3000000000", "celular con ceros"),
            ("6000000000", "fijo con ceros")
        ]
        
        for telefono, description in test_cases:
            with self.subTest(telefono=telefono):
                self._assert_validation_success(
                    self.validator.validate_telefono,
                    telefono,
                    f"Tel√©fono v√°lido: {description}"
                )
    
    def test_validate_telefono_invalid_start(self):
        """Test para tel√©fonos que no empiezan por 3 o 6"""
        print("\nüîç PROBANDO: Tel√©fonos que no empiezan por 3 o 6")
        
        test_cases = [
            ("1001234567", "tel√©fono que empieza por 1", "empezar por 3 o 6"),
            ("2001234567", "tel√©fono que empieza por 2", "empezar por 3 o 6"),
            ("4001234567", "tel√©fono que empieza por 4", "empezar por 3 o 6"),
            ("5001234567", "tel√©fono que empieza por 5", "empezar por 3 o 6"),
            ("7001234567", "tel√©fono que empieza por 7", "empezar por 3 o 6"),
            ("8001234567", "tel√©fono que empieza por 8", "empezar por 3 o 6"),
            ("9001234567", "tel√©fono que empieza por 9", "empezar por 3 o 6"),
            ("0001234567", "tel√©fono que empieza por 0", "empezar por 3 o 6")
        ]
        
        for telefono, description, expected_error in test_cases:
            with self.subTest(telefono=telefono):
                self._assert_validation_failure(
                    self.validator.validate_telefono,
                    telefono,
                    expected_error,
                    f"Tel√©fono inv√°lido: {description}"
                )
    
    def test_validate_telefono_invalid_length(self):
        """Test para tel√©fonos con longitud incorrecta"""
        print("\nüîç PROBANDO: Tel√©fonos con longitud incorrecta")
        
        test_cases = [
            ("300123456", "tel√©fono celular muy corto (9 d√≠gitos)", "exactamente 10 d√≠gitos"),
            ("30012345678", "tel√©fono celular muy largo (11 d√≠gitos)", "exactamente 10 d√≠gitos"),
            ("3001", "tel√©fono celular extremadamente corto", "exactamente 10 d√≠gitos"),
            ("600123456", "tel√©fono fijo muy corto (9 d√≠gitos)", "exactamente 10 d√≠gitos"),
            ("60012345678", "tel√©fono fijo muy largo (11 d√≠gitos)", "exactamente 10 d√≠gitos"),
            ("300", "tel√©fono con solo 3 d√≠gitos", "exactamente 10 d√≠gitos")
        ]
        
        for telefono, description, expected_error in test_cases:
            with self.subTest(telefono=telefono):
                self._assert_validation_failure(
                    self.validator.validate_telefono,
                    telefono,
                    expected_error,
                    f"Tel√©fono inv√°lido: {description}"
                )
    
    def test_validate_telefono_invalid_characters(self):
        """Test para tel√©fonos con caracteres inv√°lidos"""
        print("\nüîç PROBANDO: Tel√©fonos con caracteres no num√©ricos")
        
        test_cases = [
            ("300-123-4567", "tel√©fono con guiones", "exactamente 10 d√≠gitos"),
            ("300 123 4567", "tel√©fono con espacios", "exactamente 10 d√≠gitos"),
            ("300.123.4567", "tel√©fono con puntos", "exactamente 10 d√≠gitos"),
            ("300123456a", "tel√©fono con letra al final", "exactamente 10 d√≠gitos"),
            ("+3001234567", "tel√©fono con s√≠mbolo +", "exactamente 10 d√≠gitos"),
            ("(300)123456", "tel√©fono con par√©ntesis", "exactamente 10 d√≠gitos")
        ]
        
        for telefono, description, expected_error in test_cases:
            with self.subTest(telefono=telefono):
                self._assert_validation_failure(
                    self.validator.validate_telefono,
                    telefono,
                    expected_error,
                    f"Tel√©fono inv√°lido: {description}"
                )
    
    def test_validate_telefono_empty(self):
        """Test para tel√©fono vac√≠o"""
        print("\nüîç PROBANDO: Tel√©fonos vac√≠os o nulos")
        
        test_cases = [
            ("", "cadena vac√≠a", "no puede estar vac√≠o"),
            (None, "valor None", "no puede estar vac√≠o")
        ]
        
        for telefono, description, expected_error in test_cases:
            with self.subTest(telefono=str(telefono)):
                self._assert_validation_failure(
                    self.validator.validate_telefono,
                    telefono,
                    expected_error,
                    f"Tel√©fono inv√°lido: {description}"
                )
    
    def test_validate_email_valid(self):
        """Test para emails v√°lidos"""
        print("\nüîç PROBANDO: Validaci√≥n de emails v√°lidos")
        
        test_cases = [
            ("usuario@example.com", "email simple t√≠pico"),
            ("test.email@domain.co", "email con punto en parte local"),
            ("user+tag@site.org", "email con s√≠mbolo + (tag)"),
            ("name123@test-domain.net", "email con n√∫meros y gui√≥n en dominio"),
            ("a@b.co", "email m√≠nimo v√°lido"),
            ("user_name@example-site.com", "email con gui√≥n bajo y dominio compuesto")
        ]
        
        for email, description in test_cases:
            with self.subTest(email=email):
                self._assert_validation_success(
                    self.validator.validate_email,
                    email,
                    f"Email v√°lido: {description}"
                )
    
    def test_validate_email_no_at_symbol(self):
        """Test para emails sin s√≠mbolo @"""
        print("\nüîç PROBANDO: Emails sin s√≠mbolo @")
        
        test_cases = [
            ("usuarioexample.com", "email sin @ - falta separador", "debe contener el s√≠mbolo @"),
            ("test.email.domain.co", "email con puntos pero sin @", "debe contener el s√≠mbolo @"),
            ("plaintext", "texto simple sin @", "debe contener el s√≠mbolo @"),
            ("user.domain.com", "formato de dominio sin @", "debe contener el s√≠mbolo @")
        ]
        
        for email, description, expected_error in test_cases:
            with self.subTest(email=email):
                self._assert_validation_failure(
                    self.validator.validate_email,
                    email,
                    expected_error,
                    f"Email inv√°lido: {description}"
                )
    
    def test_validate_email_invalid_format(self):
        """Test para emails con formato inv√°lido"""
        print("\nüîç PROBANDO: Emails con formato inv√°lido")
        
        test_cases = [
            ("@example.com", "email sin parte local", "formato del email no es v√°lido"),
            ("user@", "email sin dominio", "formato del email no es v√°lido"),
            ("user@domain", "email sin TLD", "formato del email no es v√°lido"),
            ("user@@domain.com", "email con doble @", "formato del email no es v√°lido"),
            ("user@domain.", "email con TLD vac√≠o", "formato del email no es v√°lido"),
            ("user space@domain.com", "email con espacios en parte local", "formato del email no es v√°lido"),
            ("user@domain com", "email con espacios en dominio", "formato del email no es v√°lido")
        ]
        
        for email, description, expected_error in test_cases:
            with self.subTest(email=email):
                self._assert_validation_failure(
                    self.validator.validate_email,
                    email,
                    expected_error,
                    f"Email inv√°lido: {description}"
                )
    
    def test_validate_email_empty(self):
        """Test para email vac√≠o"""
        print("\nüîç PROBANDO: Emails vac√≠os o nulos")
        
        test_cases = [
            ("", "cadena vac√≠a", "no puede estar vac√≠o"),
            (None, "valor None", "no puede estar vac√≠o")
        ]
        
        for email, description, expected_error in test_cases:
            with self.subTest(email=str(email)):
                self._assert_validation_failure(
                    self.validator.validate_email,
                    email,
                    expected_error,
                    f"Email inv√°lido: {description}"
                )
    
    def test_validate_all_fields_valid(self):
        """Test para validaci√≥n de todos los campos v√°lidos"""
        print("\nüîç PROBANDO: Validaci√≥n completa con todos los campos v√°lidos")
        
        is_valid, errors = self.validator.validate_all_fields(
            identificacion="12345678",
            nombre="Juan P√©rez",
            telefono="3001234567", 
            email="juan@example.com"
        )
        
        self.assertTrue(is_valid, "‚ùå FALLO: Todos los campos v√°lidos deber√≠an pasar la validaci√≥n")
        self.assertEqual(len(errors), 0, f"‚ùå FALLO: No deber√≠a haber errores, pero se encontraron: {errors}")
        print("‚úÖ √âXITO: Validaci√≥n completa exitosa - Todos los campos son v√°lidos")
        print(f"   üìù Datos validados: ID='12345678', Nombre='Juan P√©rez', Tel='3001234567', Email='juan@example.com'")
    
    def test_validate_all_fields_multiple_errors(self):
        """Test para validaci√≥n con m√∫ltiples errores"""
        print("\nüîç PROBANDO: Validaci√≥n completa con m√∫ltiples errores")
        
        is_valid, errors = self.validator.validate_all_fields(
            identificacion="123",        # Muy corto
            nombre="Juan123",           # Caracteres inv√°lidos
            telefono="1234567890",      # No empieza por 3 o 6
            email="invalidemail"        # Sin @
        )
        
        self.assertFalse(is_valid, "‚ùå FALLO: Datos inv√°lidos deber√≠an fallar la validaci√≥n")
        self.assertEqual(len(errors), 4, f"‚ùå FALLO: Deber√≠an ser 4 errores, pero se encontraron {len(errors)}: {errors}")
        
        # Verificar que cada tipo de error est√° presente
        error_text = " ".join(errors)
        expected_errors = [
            ("entre 4 y 11 d√≠gitos", "identificaci√≥n muy corta"),
            ("solo puede contener letras", "nombre con n√∫meros"),
            ("empezar por 3 o 6", "tel√©fono con prefijo inv√°lido"),
            ("debe contener el s√≠mbolo @", "email sin @")
        ]
        
        for expected_fragment, description in expected_errors:
            self.assertIn(expected_fragment, error_text, 
                         f"‚ùå FALLO: Error esperado '{description}' no encontrado en: {errors}")
        
        print("‚úÖ √âXITO: Validaci√≥n m√∫ltiple correcta - Se detectaron todos los errores esperados")
        print(f"   üìù Errores encontrados ({len(errors)}):")
        for i, error in enumerate(errors, 1):
            print(f"      {i}. {error}")
    
    def test_validate_all_fields_partial_errors(self):
        """Test para validaci√≥n con algunos errores"""
        print("\nüîç PROBANDO: Validaci√≥n completa con error parcial")
        
        is_valid, errors = self.validator.validate_all_fields(
            identificacion="12345678",   # V√°lido
            nombre="Juan P√©rez",        # V√°lido
            telefono="1234567890",      # Inv√°lido - no empieza por 3 o 6
            email="juan@example.com"    # V√°lido
        )
        
        self.assertFalse(is_valid, "‚ùå FALLO: Datos con un campo inv√°lido deber√≠an fallar la validaci√≥n")
        self.assertEqual(len(errors), 1, f"‚ùå FALLO: Deber√≠a haber exactamente 1 error, pero se encontraron {len(errors)}: {errors}")
        self.assertIn("empezar por 3 o 6", errors[0], f"‚ùå FALLO: Error de tel√©fono esperado, pero se obtuvo: {errors[0]}")
        
        print("‚úÖ √âXITO: Validaci√≥n parcial correcta - Se detect√≥ el √∫nico error esperado")
        print(f"   üìù Error encontrado: {errors[0]}")
        print("   üìù Campos v√°lidos: identificaci√≥n, nombre, email")
        print("   üìù Campo inv√°lido: tel√©fono")


def print_test_summary():
    """Imprime un resumen de las pruebas al finalizar"""
    print("\n" + "="*80)
    print("üìä RESUMEN DE PRUEBAS UNITARIAS - UserValidator")
    print("="*80)
    print("üéØ Componentes probados:")
    print("   ‚úì validate_identificacion() - Validaci√≥n de n√∫meros de identificaci√≥n")
    print("   ‚úì validate_nombre_completo() - Validaci√≥n de nombres con tildes y √±")
    print("   ‚úì validate_telefono() - Validaci√≥n de n√∫meros celulares y fijos")
    print("   ‚úì validate_email() - Validaci√≥n de direcciones de correo")
    print("   ‚úì validate_all_fields() - Validaci√≥n completa de usuario")
    print("\nüß™ Tipos de pruebas realizadas:")
    print("   ‚Ä¢ Casos v√°lidos (happy path)")
    print("   ‚Ä¢ Casos inv√°lidos (edge cases)")
    print("   ‚Ä¢ Validaci√≥n de campos vac√≠os/nulos")
    print("   ‚Ä¢ Validaci√≥n de longitudes")
    print("   ‚Ä¢ Validaci√≥n de caracteres especiales")
    print("   ‚Ä¢ Validaci√≥n de formatos espec√≠ficos")
    print("="*80)


if __name__ == '__main__':
    # Ejecutar las pruebas
    unittest.main(verbosity=2, exit=False)
    
    # Mostrar resumen
    print_test_summary()
